#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ExamType(object):
    AudioTest = 1
    RealExam = 2

    _VALUES_TO_NAMES = {
        1: "AudioTest",
        2: "RealExam",
    }

    _NAMES_TO_VALUES = {
        "AudioTest": 1,
        "RealExam": 2,
    }


class ExamScore(object):
    """
    Attributes:
     - total
     - quality
     - key
     - detail
     - structure
     - logic

    """


    def __init__(self, total=None, quality=None, key=None, detail=None, structure=None, logic=None,):
        self.total = total
        self.quality = quality
        self.key = key
        self.detail = detail
        self.structure = structure
        self.logic = logic

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.total = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.quality = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.key = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.detail = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.structure = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.logic = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExamScore')
        if self.total is not None:
            oprot.writeFieldBegin('total', TType.DOUBLE, 1)
            oprot.writeDouble(self.total)
            oprot.writeFieldEnd()
        if self.quality is not None:
            oprot.writeFieldBegin('quality', TType.DOUBLE, 2)
            oprot.writeDouble(self.quality)
            oprot.writeFieldEnd()
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.DOUBLE, 3)
            oprot.writeDouble(self.key)
            oprot.writeFieldEnd()
        if self.detail is not None:
            oprot.writeFieldBegin('detail', TType.DOUBLE, 4)
            oprot.writeDouble(self.detail)
            oprot.writeFieldEnd()
        if self.structure is not None:
            oprot.writeFieldBegin('structure', TType.DOUBLE, 5)
            oprot.writeDouble(self.structure)
            oprot.writeFieldEnd()
        if self.logic is not None:
            oprot.writeFieldBegin('logic', TType.DOUBLE, 6)
            oprot.writeDouble(self.logic)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExamReport(object):
    """
    Attributes:
     - ftlRatio
     - clearRatio
     - speed
     - interval
     - key
     - detail
     - structure
     - logic

    """


    def __init__(self, ftlRatio=None, clearRatio=None, speed=None, interval=None, key=None, detail=None, structure=None, logic=None,):
        self.ftlRatio = ftlRatio
        self.clearRatio = clearRatio
        self.speed = speed
        self.interval = interval
        self.key = key
        self.detail = detail
        self.structure = structure
        self.logic = logic

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ftlRatio = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clearRatio = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.speed = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.interval = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.detail = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.structure = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.structure.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.logic = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.logic.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExamReport')
        if self.ftlRatio is not None:
            oprot.writeFieldBegin('ftlRatio', TType.STRING, 1)
            oprot.writeString(self.ftlRatio.encode('utf-8') if sys.version_info[0] == 2 else self.ftlRatio)
            oprot.writeFieldEnd()
        if self.clearRatio is not None:
            oprot.writeFieldBegin('clearRatio', TType.STRING, 2)
            oprot.writeString(self.clearRatio.encode('utf-8') if sys.version_info[0] == 2 else self.clearRatio)
            oprot.writeFieldEnd()
        if self.speed is not None:
            oprot.writeFieldBegin('speed', TType.STRING, 3)
            oprot.writeString(self.speed.encode('utf-8') if sys.version_info[0] == 2 else self.speed)
            oprot.writeFieldEnd()
        if self.interval is not None:
            oprot.writeFieldBegin('interval', TType.STRING, 4)
            oprot.writeString(self.interval.encode('utf-8') if sys.version_info[0] == 2 else self.interval)
            oprot.writeFieldEnd()
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 5)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        if self.detail is not None:
            oprot.writeFieldBegin('detail', TType.STRING, 6)
            oprot.writeString(self.detail.encode('utf-8') if sys.version_info[0] == 2 else self.detail)
            oprot.writeFieldEnd()
        if self.structure is not None:
            oprot.writeFieldBegin('structure', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.structure))
            for iter12 in self.structure:
                oprot.writeString(iter12.encode('utf-8') if sys.version_info[0] == 2 else iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.logic is not None:
            oprot.writeFieldBegin('logic', TType.LIST, 8)
            oprot.writeListBegin(TType.STRING, len(self.logic))
            for iter13 in self.logic:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExamRecord(object):
    """
    Attributes:
     - examStartTime
     - templateId
     - examId
     - scoreInfo

    """


    def __init__(self, examStartTime=None, templateId=None, examId=None, scoreInfo=None,):
        self.examStartTime = examStartTime
        self.templateId = templateId
        self.examId = examId
        self.scoreInfo = scoreInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.examStartTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.templateId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.examId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.scoreInfo = ExamScore()
                    self.scoreInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExamRecord')
        if self.examStartTime is not None:
            oprot.writeFieldBegin('examStartTime', TType.STRING, 1)
            oprot.writeString(self.examStartTime.encode('utf-8') if sys.version_info[0] == 2 else self.examStartTime)
            oprot.writeFieldEnd()
        if self.templateId is not None:
            oprot.writeFieldBegin('templateId', TType.STRING, 2)
            oprot.writeString(self.templateId.encode('utf-8') if sys.version_info[0] == 2 else self.templateId)
            oprot.writeFieldEnd()
        if self.examId is not None:
            oprot.writeFieldBegin('examId', TType.STRING, 3)
            oprot.writeString(self.examId.encode('utf-8') if sys.version_info[0] == 2 else self.examId)
            oprot.writeFieldEnd()
        if self.scoreInfo is not None:
            oprot.writeFieldBegin('scoreInfo', TType.STRUCT, 4)
            self.scoreInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QuestionInfo(object):
    """
    Attributes:
     - id
     - content
     - type
     - questionNum
     - readLimitTime
     - answerLimitTime
     - isLastQuestion
     - questionTip
     - examTime
     - examLeftTime

    """


    def __init__(self, id=None, content=None, type=None, questionNum=None, readLimitTime=None, answerLimitTime=None, isLastQuestion=None, questionTip=None, examTime=None, examLeftTime=None,):
        self.id = id
        self.content = content
        self.type = type
        self.questionNum = questionNum
        self.readLimitTime = readLimitTime
        self.answerLimitTime = answerLimitTime
        self.isLastQuestion = isLastQuestion
        self.questionTip = questionTip
        self.examTime = examTime
        self.examLeftTime = examLeftTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.content = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.questionNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.readLimitTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.answerLimitTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.isLastQuestion = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.questionTip = {}
                    (_ktype15, _vtype16, _size14) = iprot.readMapBegin()
                    for _i18 in range(_size14):
                        _key19 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val20 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.questionTip[_key19] = _val20
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.examTime = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.examLeftTime = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QuestionInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 2)
            oprot.writeString(self.content.encode('utf-8') if sys.version_info[0] == 2 else self.content)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.questionNum is not None:
            oprot.writeFieldBegin('questionNum', TType.I32, 4)
            oprot.writeI32(self.questionNum)
            oprot.writeFieldEnd()
        if self.readLimitTime is not None:
            oprot.writeFieldBegin('readLimitTime', TType.I32, 5)
            oprot.writeI32(self.readLimitTime)
            oprot.writeFieldEnd()
        if self.answerLimitTime is not None:
            oprot.writeFieldBegin('answerLimitTime', TType.I32, 6)
            oprot.writeI32(self.answerLimitTime)
            oprot.writeFieldEnd()
        if self.isLastQuestion is not None:
            oprot.writeFieldBegin('isLastQuestion', TType.BOOL, 7)
            oprot.writeBool(self.isLastQuestion)
            oprot.writeFieldEnd()
        if self.questionTip is not None:
            oprot.writeFieldBegin('questionTip', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.questionTip))
            for kiter21, viter22 in self.questionTip.items():
                oprot.writeString(kiter21.encode('utf-8') if sys.version_info[0] == 2 else kiter21)
                oprot.writeString(viter22.encode('utf-8') if sys.version_info[0] == 2 else viter22)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.examTime is not None:
            oprot.writeFieldBegin('examTime', TType.DOUBLE, 9)
            oprot.writeDouble(self.examTime)
            oprot.writeFieldEnd()
        if self.examLeftTime is not None:
            oprot.writeFieldBegin('examLeftTime', TType.DOUBLE, 10)
            oprot.writeDouble(self.examLeftTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.content is None:
            raise TProtocolException(message='Required field content is unset!')
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.readLimitTime is None:
            raise TProtocolException(message='Required field readLimitTime is unset!')
        if self.answerLimitTime is None:
            raise TProtocolException(message='Required field answerLimitTime is unset!')
        if self.questionTip is None:
            raise TProtocolException(message='Required field questionTip is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExamTemplate(object):
    """
    Attributes:
     - id
     - name
     - description
     - questionCount
     - isDeprecated
     - duration

    """


    def __init__(self, id=None, name=None, description=None, questionCount=None, isDeprecated=None, duration=None,):
        self.id = id
        self.name = name
        self.description = description
        self.questionCount = questionCount
        self.isDeprecated = isDeprecated
        self.duration = duration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.questionCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.isDeprecated = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.duration = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExamTemplate')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 3)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.questionCount is not None:
            oprot.writeFieldBegin('questionCount', TType.I32, 4)
            oprot.writeI32(self.questionCount)
            oprot.writeFieldEnd()
        if self.isDeprecated is not None:
            oprot.writeFieldBegin('isDeprecated', TType.BOOL, 5)
            oprot.writeBool(self.isDeprecated)
            oprot.writeFieldEnd()
        if self.duration is not None:
            oprot.writeFieldBegin('duration', TType.I32, 6)
            oprot.writeI32(self.duration)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetExamReportRequest(object):
    """
    Attributes:
     - examId

    """


    def __init__(self, examId=None,):
        self.examId = examId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.examId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetExamReportRequest')
        if self.examId is not None:
            oprot.writeFieldBegin('examId', TType.STRING, 1)
            oprot.writeString(self.examId.encode('utf-8') if sys.version_info[0] == 2 else self.examId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.examId is None:
            raise TProtocolException(message='Required field examId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetExamReportResponse(object):
    """
    Attributes:
     - report
     - score
     - statusCode
     - statusMsg

    """


    def __init__(self, report=None, score=None, statusCode=None, statusMsg=None,):
        self.report = report
        self.score = score
        self.statusCode = statusCode
        self.statusMsg = statusMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.report = ExamReport()
                    self.report.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.score = ExamScore()
                    self.score.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.statusCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.statusMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetExamReportResponse')
        if self.report is not None:
            oprot.writeFieldBegin('report', TType.STRUCT, 1)
            self.report.write(oprot)
            oprot.writeFieldEnd()
        if self.score is not None:
            oprot.writeFieldBegin('score', TType.STRUCT, 2)
            self.score.write(oprot)
            oprot.writeFieldEnd()
        if self.statusCode is not None:
            oprot.writeFieldBegin('statusCode', TType.I32, 3)
            oprot.writeI32(self.statusCode)
            oprot.writeFieldEnd()
        if self.statusMsg is not None:
            oprot.writeFieldBegin('statusMsg', TType.STRING, 4)
            oprot.writeString(self.statusMsg.encode('utf-8') if sys.version_info[0] == 2 else self.statusMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.report is None:
            raise TProtocolException(message='Required field report is unset!')
        if self.score is None:
            raise TProtocolException(message='Required field score is unset!')
        if self.statusCode is None:
            raise TProtocolException(message='Required field statusCode is unset!')
        if self.statusMsg is None:
            raise TProtocolException(message='Required field statusMsg is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ComputeExamScoreRequest(object):
    """
    Attributes:
     - examId

    """


    def __init__(self, examId=None,):
        self.examId = examId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.examId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComputeExamScoreRequest')
        if self.examId is not None:
            oprot.writeFieldBegin('examId', TType.STRING, 1)
            oprot.writeString(self.examId.encode('utf-8') if sys.version_info[0] == 2 else self.examId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.examId is None:
            raise TProtocolException(message='Required field examId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ComputeExamScoreResponse(object):
    """
    Attributes:
     - score
     - statusCode
     - statusMsg

    """


    def __init__(self, score=None, statusCode=None, statusMsg=None,):
        self.score = score
        self.statusCode = statusCode
        self.statusMsg = statusMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.score = ExamScore()
                    self.score.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.statusCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.statusMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComputeExamScoreResponse')
        if self.score is not None:
            oprot.writeFieldBegin('score', TType.STRUCT, 1)
            self.score.write(oprot)
            oprot.writeFieldEnd()
        if self.statusCode is not None:
            oprot.writeFieldBegin('statusCode', TType.I32, 2)
            oprot.writeI32(self.statusCode)
            oprot.writeFieldEnd()
        if self.statusMsg is not None:
            oprot.writeFieldBegin('statusMsg', TType.STRING, 3)
            oprot.writeString(self.statusMsg.encode('utf-8') if sys.version_info[0] == 2 else self.statusMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.score is None:
            raise TProtocolException(message='Required field score is unset!')
        if self.statusCode is None:
            raise TProtocolException(message='Required field statusCode is unset!')
        if self.statusMsg is None:
            raise TProtocolException(message='Required field statusMsg is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetExamRecordRequest(object):
    """
    Attributes:
     - userId
     - templateId

    """


    def __init__(self, userId=None, templateId=None,):
        self.userId = userId
        self.templateId = templateId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.templateId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetExamRecordRequest')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.templateId is not None:
            oprot.writeFieldBegin('templateId', TType.STRING, 2)
            oprot.writeString(self.templateId.encode('utf-8') if sys.version_info[0] == 2 else self.templateId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetExamRecordResponse(object):
    """
    Attributes:
     - examList
     - statusCode
     - statusMsg

    """


    def __init__(self, examList=None, statusCode=None, statusMsg=None,):
        self.examList = examList
        self.statusCode = statusCode
        self.statusMsg = statusMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.examList = []
                    (_etype26, _size23) = iprot.readListBegin()
                    for _i27 in range(_size23):
                        _elem28 = ExamRecord()
                        _elem28.read(iprot)
                        self.examList.append(_elem28)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.statusCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.statusMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetExamRecordResponse')
        if self.examList is not None:
            oprot.writeFieldBegin('examList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.examList))
            for iter29 in self.examList:
                iter29.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.statusCode is not None:
            oprot.writeFieldBegin('statusCode', TType.I32, 2)
            oprot.writeI32(self.statusCode)
            oprot.writeFieldEnd()
        if self.statusMsg is not None:
            oprot.writeFieldBegin('statusMsg', TType.STRING, 3)
            oprot.writeString(self.statusMsg.encode('utf-8') if sys.version_info[0] == 2 else self.statusMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.examList is None:
            raise TProtocolException(message='Required field examList is unset!')
        if self.statusCode is None:
            raise TProtocolException(message='Required field statusCode is unset!')
        if self.statusMsg is None:
            raise TProtocolException(message='Required field statusMsg is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InitNewAudioTestRequest(object):
    """
    Attributes:
     - userId

    """


    def __init__(self, userId=None,):
        self.userId = userId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InitNewAudioTestRequest')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.userId is None:
            raise TProtocolException(message='Required field userId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InitNewAudioTestResponse(object):
    """
    Attributes:
     - question
     - statusCode
     - statusMsg

    """


    def __init__(self, question=None, statusCode=None, statusMsg=None,):
        self.question = question
        self.statusCode = statusCode
        self.statusMsg = statusMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.question = QuestionInfo()
                    self.question.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.statusCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.statusMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InitNewAudioTestResponse')
        if self.question is not None:
            oprot.writeFieldBegin('question', TType.STRUCT, 1)
            self.question.write(oprot)
            oprot.writeFieldEnd()
        if self.statusCode is not None:
            oprot.writeFieldBegin('statusCode', TType.I32, 2)
            oprot.writeI32(self.statusCode)
            oprot.writeFieldEnd()
        if self.statusMsg is not None:
            oprot.writeFieldBegin('statusMsg', TType.STRING, 3)
            oprot.writeString(self.statusMsg.encode('utf-8') if sys.version_info[0] == 2 else self.statusMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.question is None:
            raise TProtocolException(message='Required field question is unset!')
        if self.statusCode is None:
            raise TProtocolException(message='Required field statusCode is unset!')
        if self.statusMsg is None:
            raise TProtocolException(message='Required field statusMsg is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InitNewExamRequest(object):
    """
    Attributes:
     - userId
     - templateId

    """


    def __init__(self, userId=None, templateId=None,):
        self.userId = userId
        self.templateId = templateId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.templateId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InitNewExamRequest')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.templateId is not None:
            oprot.writeFieldBegin('templateId', TType.STRING, 2)
            oprot.writeString(self.templateId.encode('utf-8') if sys.version_info[0] == 2 else self.templateId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.userId is None:
            raise TProtocolException(message='Required field userId is unset!')
        if self.templateId is None:
            raise TProtocolException(message='Required field templateId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InitNewExamResponse(object):
    """
    Attributes:
     - examId
     - statusCode
     - statusMsg

    """


    def __init__(self, examId=None, statusCode=None, statusMsg=None,):
        self.examId = examId
        self.statusCode = statusCode
        self.statusMsg = statusMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.examId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.statusCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.statusMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InitNewExamResponse')
        if self.examId is not None:
            oprot.writeFieldBegin('examId', TType.STRING, 1)
            oprot.writeString(self.examId.encode('utf-8') if sys.version_info[0] == 2 else self.examId)
            oprot.writeFieldEnd()
        if self.statusCode is not None:
            oprot.writeFieldBegin('statusCode', TType.I32, 2)
            oprot.writeI32(self.statusCode)
            oprot.writeFieldEnd()
        if self.statusMsg is not None:
            oprot.writeFieldBegin('statusMsg', TType.STRING, 3)
            oprot.writeString(self.statusMsg.encode('utf-8') if sys.version_info[0] == 2 else self.statusMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.examId is None:
            raise TProtocolException(message='Required field examId is unset!')
        if self.statusCode is None:
            raise TProtocolException(message='Required field statusCode is unset!')
        if self.statusMsg is None:
            raise TProtocolException(message='Required field statusMsg is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetQuestionInfoRequest(object):
    """
    Attributes:
     - examId
     - questionNum

    """


    def __init__(self, examId=None, questionNum=None,):
        self.examId = examId
        self.questionNum = questionNum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.examId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.questionNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetQuestionInfoRequest')
        if self.examId is not None:
            oprot.writeFieldBegin('examId', TType.STRING, 1)
            oprot.writeString(self.examId.encode('utf-8') if sys.version_info[0] == 2 else self.examId)
            oprot.writeFieldEnd()
        if self.questionNum is not None:
            oprot.writeFieldBegin('questionNum', TType.I32, 2)
            oprot.writeI32(self.questionNum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.examId is None:
            raise TProtocolException(message='Required field examId is unset!')
        if self.questionNum is None:
            raise TProtocolException(message='Required field questionNum is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetQuestionInfoResponse(object):
    """
    Attributes:
     - question
     - statusCode
     - statusMsg

    """


    def __init__(self, question=None, statusCode=None, statusMsg=None,):
        self.question = question
        self.statusCode = statusCode
        self.statusMsg = statusMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.question = QuestionInfo()
                    self.question.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.statusCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.statusMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetQuestionInfoResponse')
        if self.question is not None:
            oprot.writeFieldBegin('question', TType.STRUCT, 1)
            self.question.write(oprot)
            oprot.writeFieldEnd()
        if self.statusCode is not None:
            oprot.writeFieldBegin('statusCode', TType.I32, 3)
            oprot.writeI32(self.statusCode)
            oprot.writeFieldEnd()
        if self.statusMsg is not None:
            oprot.writeFieldBegin('statusMsg', TType.STRING, 4)
            oprot.writeString(self.statusMsg.encode('utf-8') if sys.version_info[0] == 2 else self.statusMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.question is None:
            raise TProtocolException(message='Required field question is unset!')
        if self.statusCode is None:
            raise TProtocolException(message='Required field statusCode is unset!')
        if self.statusMsg is None:
            raise TProtocolException(message='Required field statusMsg is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFileUploadPathRequest(object):
    """
    Attributes:
     - examId
     - userId
     - type
     - questionNum

    """


    def __init__(self, examId=None, userId=None, type=None, questionNum=None,):
        self.examId = examId
        self.userId = userId
        self.type = type
        self.questionNum = questionNum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.examId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.questionNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetFileUploadPathRequest')
        if self.examId is not None:
            oprot.writeFieldBegin('examId', TType.STRING, 1)
            oprot.writeString(self.examId.encode('utf-8') if sys.version_info[0] == 2 else self.examId)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 2)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.questionNum is not None:
            oprot.writeFieldBegin('questionNum', TType.I32, 4)
            oprot.writeI32(self.questionNum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.userId is None:
            raise TProtocolException(message='Required field userId is unset!')
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFileUploadPathResponse(object):
    """
    Attributes:
     - path
     - statusCode
     - statusMsg

    """


    def __init__(self, path=None, statusCode=None, statusMsg=None,):
        self.path = path
        self.statusCode = statusCode
        self.statusMsg = statusMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.statusCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.statusMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetFileUploadPathResponse')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.statusCode is not None:
            oprot.writeFieldBegin('statusCode', TType.I32, 3)
            oprot.writeI32(self.statusCode)
            oprot.writeFieldEnd()
        if self.statusMsg is not None:
            oprot.writeFieldBegin('statusMsg', TType.STRING, 4)
            oprot.writeString(self.statusMsg.encode('utf-8') if sys.version_info[0] == 2 else self.statusMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.path is None:
            raise TProtocolException(message='Required field path is unset!')
        if self.statusCode is None:
            raise TProtocolException(message='Required field statusCode is unset!')
        if self.statusMsg is None:
            raise TProtocolException(message='Required field statusMsg is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetPaperTemplateRequest(object):
    """
    Attributes:
     - templateId

    """


    def __init__(self, templateId=None,):
        self.templateId = templateId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.templateId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetPaperTemplateRequest')
        if self.templateId is not None:
            oprot.writeFieldBegin('templateId', TType.STRING, 1)
            oprot.writeString(self.templateId.encode('utf-8') if sys.version_info[0] == 2 else self.templateId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetPaperTemplateResponse(object):
    """
    Attributes:
     - templateList
     - statusCode
     - statusMsg

    """


    def __init__(self, templateList=None, statusCode=None, statusMsg=None,):
        self.templateList = templateList
        self.statusCode = statusCode
        self.statusMsg = statusMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.templateList = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = ExamTemplate()
                        _elem35.read(iprot)
                        self.templateList.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.statusCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.statusMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetPaperTemplateResponse')
        if self.templateList is not None:
            oprot.writeFieldBegin('templateList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.templateList))
            for iter36 in self.templateList:
                iter36.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.statusCode is not None:
            oprot.writeFieldBegin('statusCode', TType.I32, 2)
            oprot.writeI32(self.statusCode)
            oprot.writeFieldEnd()
        if self.statusMsg is not None:
            oprot.writeFieldBegin('statusMsg', TType.STRING, 3)
            oprot.writeString(self.statusMsg.encode('utf-8') if sys.version_info[0] == 2 else self.statusMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.templateList is None:
            raise TProtocolException(message='Required field templateList is unset!')
        if self.statusCode is None:
            raise TProtocolException(message='Required field statusCode is unset!')
        if self.statusMsg is None:
            raise TProtocolException(message='Required field statusMsg is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAudioTestResultRequest(object):
    """
    Attributes:
     - examId

    """


    def __init__(self, examId=None,):
        self.examId = examId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.examId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetAudioTestResultRequest')
        if self.examId is not None:
            oprot.writeFieldBegin('examId', TType.STRING, 1)
            oprot.writeString(self.examId.encode('utf-8') if sys.version_info[0] == 2 else self.examId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAudioTestResultResponse(object):
    """
    Attributes:
     - canRecognize
     - levenshteinRatio
     - statusCode
     - statusMsg

    """


    def __init__(self, canRecognize=None, levenshteinRatio=None, statusCode=None, statusMsg=None,):
        self.canRecognize = canRecognize
        self.levenshteinRatio = levenshteinRatio
        self.statusCode = statusCode
        self.statusMsg = statusMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.canRecognize = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.levenshteinRatio = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.statusCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.statusMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetAudioTestResultResponse')
        if self.canRecognize is not None:
            oprot.writeFieldBegin('canRecognize', TType.BOOL, 1)
            oprot.writeBool(self.canRecognize)
            oprot.writeFieldEnd()
        if self.levenshteinRatio is not None:
            oprot.writeFieldBegin('levenshteinRatio', TType.DOUBLE, 2)
            oprot.writeDouble(self.levenshteinRatio)
            oprot.writeFieldEnd()
        if self.statusCode is not None:
            oprot.writeFieldBegin('statusCode', TType.I32, 3)
            oprot.writeI32(self.statusCode)
            oprot.writeFieldEnd()
        if self.statusMsg is not None:
            oprot.writeFieldBegin('statusMsg', TType.STRING, 4)
            oprot.writeString(self.statusMsg.encode('utf-8') if sys.version_info[0] == 2 else self.statusMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.canRecognize is None:
            raise TProtocolException(message='Required field canRecognize is unset!')
        if self.levenshteinRatio is None:
            raise TProtocolException(message='Required field levenshteinRatio is unset!')
        if self.statusCode is None:
            raise TProtocolException(message='Required field statusCode is unset!')
        if self.statusMsg is None:
            raise TProtocolException(message='Required field statusMsg is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetExamResultRequest(object):
    """
    Attributes:
     - examId

    """


    def __init__(self, examId=None,):
        self.examId = examId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.examId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetExamResultRequest')
        if self.examId is not None:
            oprot.writeFieldBegin('examId', TType.STRING, 1)
            oprot.writeString(self.examId.encode('utf-8') if sys.version_info[0] == 2 else self.examId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.examId is None:
            raise TProtocolException(message='Required field examId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetExamResultResponse(object):
    """
    Attributes:
     - report
     - score
     - statusCode
     - statusMsg

    """


    def __init__(self, report=None, score=None, statusCode=None, statusMsg=None,):
        self.report = report
        self.score = score
        self.statusCode = statusCode
        self.statusMsg = statusMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.report = ExamReport()
                    self.report.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.score = ExamScore()
                    self.score.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.statusCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.statusMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetExamResultResponse')
        if self.report is not None:
            oprot.writeFieldBegin('report', TType.STRUCT, 1)
            self.report.write(oprot)
            oprot.writeFieldEnd()
        if self.score is not None:
            oprot.writeFieldBegin('score', TType.STRUCT, 2)
            self.score.write(oprot)
            oprot.writeFieldEnd()
        if self.statusCode is not None:
            oprot.writeFieldBegin('statusCode', TType.I32, 3)
            oprot.writeI32(self.statusCode)
            oprot.writeFieldEnd()
        if self.statusMsg is not None:
            oprot.writeFieldBegin('statusMsg', TType.STRING, 4)
            oprot.writeString(self.statusMsg.encode('utf-8') if sys.version_info[0] == 2 else self.statusMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.report is None:
            raise TProtocolException(message='Required field report is unset!')
        if self.score is None:
            raise TProtocolException(message='Required field score is unset!')
        if self.statusCode is None:
            raise TProtocolException(message='Required field statusCode is unset!')
        if self.statusMsg is None:
            raise TProtocolException(message='Required field statusMsg is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SavePaperTemplateRequest(object):
    """
    Attributes:
     - newTemplate

    """


    def __init__(self, newTemplate=None,):
        self.newTemplate = newTemplate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.newTemplate = ExamTemplate()
                    self.newTemplate.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SavePaperTemplateRequest')
        if self.newTemplate is not None:
            oprot.writeFieldBegin('newTemplate', TType.STRUCT, 1)
            self.newTemplate.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.newTemplate is None:
            raise TProtocolException(message='Required field newTemplate is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SavePaperTemplateResponse(object):
    """
    Attributes:
     - statusCode
     - statusMsg

    """


    def __init__(self, statusCode=None, statusMsg=None,):
        self.statusCode = statusCode
        self.statusMsg = statusMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.statusCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.statusMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SavePaperTemplateResponse')
        if self.statusCode is not None:
            oprot.writeFieldBegin('statusCode', TType.I32, 1)
            oprot.writeI32(self.statusCode)
            oprot.writeFieldEnd()
        if self.statusMsg is not None:
            oprot.writeFieldBegin('statusMsg', TType.STRING, 2)
            oprot.writeString(self.statusMsg.encode('utf-8') if sys.version_info[0] == 2 else self.statusMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.statusCode is None:
            raise TProtocolException(message='Required field statusCode is unset!')
        if self.statusMsg is None:
            raise TProtocolException(message='Required field statusMsg is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ExamScore)
ExamScore.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'total', None, None, ),  # 1
    (2, TType.DOUBLE, 'quality', None, None, ),  # 2
    (3, TType.DOUBLE, 'key', None, None, ),  # 3
    (4, TType.DOUBLE, 'detail', None, None, ),  # 4
    (5, TType.DOUBLE, 'structure', None, None, ),  # 5
    (6, TType.DOUBLE, 'logic', None, None, ),  # 6
)
all_structs.append(ExamReport)
ExamReport.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ftlRatio', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'clearRatio', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'speed', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'interval', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'key', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'detail', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'structure', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.LIST, 'logic', (TType.STRING, 'UTF8', False), None, ),  # 8
)
all_structs.append(ExamRecord)
ExamRecord.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'examStartTime', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'templateId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'examId', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'scoreInfo', [ExamScore, None], None, ),  # 4
)
all_structs.append(QuestionInfo)
QuestionInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'content', 'UTF8', None, ),  # 2
    (3, TType.I32, 'type', None, None, ),  # 3
    (4, TType.I32, 'questionNum', None, None, ),  # 4
    (5, TType.I32, 'readLimitTime', None, None, ),  # 5
    (6, TType.I32, 'answerLimitTime', None, None, ),  # 6
    (7, TType.BOOL, 'isLastQuestion', None, None, ),  # 7
    (8, TType.MAP, 'questionTip', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
    (9, TType.DOUBLE, 'examTime', None, None, ),  # 9
    (10, TType.DOUBLE, 'examLeftTime', None, None, ),  # 10
)
all_structs.append(ExamTemplate)
ExamTemplate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'description', 'UTF8', None, ),  # 3
    (4, TType.I32, 'questionCount', None, None, ),  # 4
    (5, TType.BOOL, 'isDeprecated', None, None, ),  # 5
    (6, TType.I32, 'duration', None, None, ),  # 6
)
all_structs.append(GetExamReportRequest)
GetExamReportRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'examId', 'UTF8', None, ),  # 1
)
all_structs.append(GetExamReportResponse)
GetExamReportResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'report', [ExamReport, None], None, ),  # 1
    (2, TType.STRUCT, 'score', [ExamScore, None], None, ),  # 2
    (3, TType.I32, 'statusCode', None, None, ),  # 3
    (4, TType.STRING, 'statusMsg', 'UTF8', None, ),  # 4
)
all_structs.append(ComputeExamScoreRequest)
ComputeExamScoreRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'examId', 'UTF8', None, ),  # 1
)
all_structs.append(ComputeExamScoreResponse)
ComputeExamScoreResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'score', [ExamScore, None], None, ),  # 1
    (2, TType.I32, 'statusCode', None, None, ),  # 2
    (3, TType.STRING, 'statusMsg', 'UTF8', None, ),  # 3
)
all_structs.append(GetExamRecordRequest)
GetExamRecordRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'templateId', 'UTF8', None, ),  # 2
)
all_structs.append(GetExamRecordResponse)
GetExamRecordResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'examList', (TType.STRUCT, [ExamRecord, None], False), None, ),  # 1
    (2, TType.I32, 'statusCode', None, None, ),  # 2
    (3, TType.STRING, 'statusMsg', 'UTF8', None, ),  # 3
)
all_structs.append(InitNewAudioTestRequest)
InitNewAudioTestRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
)
all_structs.append(InitNewAudioTestResponse)
InitNewAudioTestResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'question', [QuestionInfo, None], None, ),  # 1
    (2, TType.I32, 'statusCode', None, None, ),  # 2
    (3, TType.STRING, 'statusMsg', 'UTF8', None, ),  # 3
)
all_structs.append(InitNewExamRequest)
InitNewExamRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'templateId', 'UTF8', None, ),  # 2
)
all_structs.append(InitNewExamResponse)
InitNewExamResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'examId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'statusCode', None, None, ),  # 2
    (3, TType.STRING, 'statusMsg', 'UTF8', None, ),  # 3
)
all_structs.append(GetQuestionInfoRequest)
GetQuestionInfoRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'examId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'questionNum', None, None, ),  # 2
)
all_structs.append(GetQuestionInfoResponse)
GetQuestionInfoResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'question', [QuestionInfo, None], None, ),  # 1
    None,  # 2
    (3, TType.I32, 'statusCode', None, None, ),  # 3
    (4, TType.STRING, 'statusMsg', 'UTF8', None, ),  # 4
)
all_structs.append(GetFileUploadPathRequest)
GetFileUploadPathRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'examId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'userId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'type', None, None, ),  # 3
    (4, TType.I32, 'questionNum', None, None, ),  # 4
)
all_structs.append(GetFileUploadPathResponse)
GetFileUploadPathResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'path', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.I32, 'statusCode', None, None, ),  # 3
    (4, TType.STRING, 'statusMsg', 'UTF8', None, ),  # 4
)
all_structs.append(GetPaperTemplateRequest)
GetPaperTemplateRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'templateId', 'UTF8', None, ),  # 1
)
all_structs.append(GetPaperTemplateResponse)
GetPaperTemplateResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'templateList', (TType.STRUCT, [ExamTemplate, None], False), None, ),  # 1
    (2, TType.I32, 'statusCode', None, None, ),  # 2
    (3, TType.STRING, 'statusMsg', 'UTF8', None, ),  # 3
)
all_structs.append(GetAudioTestResultRequest)
GetAudioTestResultRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'examId', 'UTF8', None, ),  # 1
)
all_structs.append(GetAudioTestResultResponse)
GetAudioTestResultResponse.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'canRecognize', None, None, ),  # 1
    (2, TType.DOUBLE, 'levenshteinRatio', None, None, ),  # 2
    (3, TType.I32, 'statusCode', None, None, ),  # 3
    (4, TType.STRING, 'statusMsg', 'UTF8', None, ),  # 4
)
all_structs.append(GetExamResultRequest)
GetExamResultRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'examId', 'UTF8', None, ),  # 1
)
all_structs.append(GetExamResultResponse)
GetExamResultResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'report', [ExamReport, None], None, ),  # 1
    (2, TType.STRUCT, 'score', [ExamScore, None], None, ),  # 2
    (3, TType.I32, 'statusCode', None, None, ),  # 3
    (4, TType.STRING, 'statusMsg', 'UTF8', None, ),  # 4
)
all_structs.append(SavePaperTemplateRequest)
SavePaperTemplateRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'newTemplate', [ExamTemplate, None], None, ),  # 1
)
all_structs.append(SavePaperTemplateResponse)
SavePaperTemplateResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'statusCode', None, None, ),  # 1
    (2, TType.STRING, 'statusMsg', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
