#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ExamScore(object):
    """
    Attributes:
     - total
     - quality
     - key
     - detail
     - structure
     - logic

    """


    def __init__(self, total=None, quality=None, key=None, detail=None, structure=None, logic=None,):
        self.total = total
        self.quality = quality
        self.key = key
        self.detail = detail
        self.structure = structure
        self.logic = logic

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.total = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.quality = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.key = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.detail = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.structure = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.logic = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExamScore')
        if self.total is not None:
            oprot.writeFieldBegin('total', TType.DOUBLE, 1)
            oprot.writeDouble(self.total)
            oprot.writeFieldEnd()
        if self.quality is not None:
            oprot.writeFieldBegin('quality', TType.DOUBLE, 2)
            oprot.writeDouble(self.quality)
            oprot.writeFieldEnd()
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.DOUBLE, 3)
            oprot.writeDouble(self.key)
            oprot.writeFieldEnd()
        if self.detail is not None:
            oprot.writeFieldBegin('detail', TType.DOUBLE, 4)
            oprot.writeDouble(self.detail)
            oprot.writeFieldEnd()
        if self.structure is not None:
            oprot.writeFieldBegin('structure', TType.DOUBLE, 5)
            oprot.writeDouble(self.structure)
            oprot.writeFieldEnd()
        if self.logic is not None:
            oprot.writeFieldBegin('logic', TType.DOUBLE, 6)
            oprot.writeDouble(self.logic)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExamReport(object):
    """
    Attributes:
     - ftlRatio
     - clearRatio
     - speed
     - interval
     - key
     - detail
     - structure
     - logic

    """


    def __init__(self, ftlRatio=None, clearRatio=None, speed=None, interval=None, key=None, detail=None, structure=None, logic=None,):
        self.ftlRatio = ftlRatio
        self.clearRatio = clearRatio
        self.speed = speed
        self.interval = interval
        self.key = key
        self.detail = detail
        self.structure = structure
        self.logic = logic

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ftlRatio = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clearRatio = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.speed = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.interval = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.detail = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.structure = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.structure.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.logic = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.logic.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExamReport')
        if self.ftlRatio is not None:
            oprot.writeFieldBegin('ftlRatio', TType.STRING, 1)
            oprot.writeString(self.ftlRatio.encode('utf-8') if sys.version_info[0] == 2 else self.ftlRatio)
            oprot.writeFieldEnd()
        if self.clearRatio is not None:
            oprot.writeFieldBegin('clearRatio', TType.STRING, 2)
            oprot.writeString(self.clearRatio.encode('utf-8') if sys.version_info[0] == 2 else self.clearRatio)
            oprot.writeFieldEnd()
        if self.speed is not None:
            oprot.writeFieldBegin('speed', TType.STRING, 3)
            oprot.writeString(self.speed.encode('utf-8') if sys.version_info[0] == 2 else self.speed)
            oprot.writeFieldEnd()
        if self.interval is not None:
            oprot.writeFieldBegin('interval', TType.STRING, 4)
            oprot.writeString(self.interval.encode('utf-8') if sys.version_info[0] == 2 else self.interval)
            oprot.writeFieldEnd()
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 5)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        if self.detail is not None:
            oprot.writeFieldBegin('detail', TType.STRING, 6)
            oprot.writeString(self.detail.encode('utf-8') if sys.version_info[0] == 2 else self.detail)
            oprot.writeFieldEnd()
        if self.structure is not None:
            oprot.writeFieldBegin('structure', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.structure))
            for iter12 in self.structure:
                oprot.writeString(iter12.encode('utf-8') if sys.version_info[0] == 2 else iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.logic is not None:
            oprot.writeFieldBegin('logic', TType.LIST, 8)
            oprot.writeListBegin(TType.STRING, len(self.logic))
            for iter13 in self.logic:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetExamReportRequest(object):
    """
    Attributes:
     - examId

    """


    def __init__(self, examId=None,):
        self.examId = examId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.examId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetExamReportRequest')
        if self.examId is not None:
            oprot.writeFieldBegin('examId', TType.STRING, 1)
            oprot.writeString(self.examId.encode('utf-8') if sys.version_info[0] == 2 else self.examId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.examId is None:
            raise TProtocolException(message='Required field examId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetExamReportResponse(object):
    """
    Attributes:
     - report
     - score
     - statusCode
     - statusMsg

    """


    def __init__(self, report=None, score=None, statusCode=None, statusMsg=None,):
        self.report = report
        self.score = score
        self.statusCode = statusCode
        self.statusMsg = statusMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.report = ExamReport()
                    self.report.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.score = ExamScore()
                    self.score.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.statusCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.statusMsg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetExamReportResponse')
        if self.report is not None:
            oprot.writeFieldBegin('report', TType.STRUCT, 1)
            self.report.write(oprot)
            oprot.writeFieldEnd()
        if self.score is not None:
            oprot.writeFieldBegin('score', TType.STRUCT, 2)
            self.score.write(oprot)
            oprot.writeFieldEnd()
        if self.statusCode is not None:
            oprot.writeFieldBegin('statusCode', TType.I32, 3)
            oprot.writeI32(self.statusCode)
            oprot.writeFieldEnd()
        if self.statusMsg is not None:
            oprot.writeFieldBegin('statusMsg', TType.STRING, 4)
            oprot.writeString(self.statusMsg.encode('utf-8') if sys.version_info[0] == 2 else self.statusMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.report is None:
            raise TProtocolException(message='Required field report is unset!')
        if self.score is None:
            raise TProtocolException(message='Required field score is unset!')
        if self.statusCode is None:
            raise TProtocolException(message='Required field statusCode is unset!')
        if self.statusMsg is None:
            raise TProtocolException(message='Required field statusMsg is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ExamScore)
ExamScore.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'total', None, None, ),  # 1
    (2, TType.DOUBLE, 'quality', None, None, ),  # 2
    (3, TType.DOUBLE, 'key', None, None, ),  # 3
    (4, TType.DOUBLE, 'detail', None, None, ),  # 4
    (5, TType.DOUBLE, 'structure', None, None, ),  # 5
    (6, TType.DOUBLE, 'logic', None, None, ),  # 6
)
all_structs.append(ExamReport)
ExamReport.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ftlRatio', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'clearRatio', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'speed', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'interval', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'key', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'detail', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'structure', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.LIST, 'logic', (TType.STRING, 'UTF8', False), None, ),  # 8
)
all_structs.append(GetExamReportRequest)
GetExamReportRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'examId', 'UTF8', None, ),  # 1
)
all_structs.append(GetExamReportResponse)
GetExamReportResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'report', [ExamReport, None], None, ),  # 1
    (2, TType.STRUCT, 'score', [ExamScore, None], None, ),  # 2
    (3, TType.I32, 'statusCode', None, None, ),  # 3
    (4, TType.STRING, 'statusMsg', 'UTF8', None, ),  # 4
)
fix_spec(all_structs)
del all_structs
